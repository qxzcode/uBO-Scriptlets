# Makes it so MathJax doesn't get selected when tabbing between form inputs.
mathjax-notab.js application/javascript
(function() {
    console.log("mathjax-notab v3 loaded");
    if (!window.MathJax) {
        console.log("error: window.MathJax is", window.MathJax);
    } else {
        MathJax.Hub.Config({menuSettings: {inTabOrder: false}});
        console.log("successfully set MathJax config");
    }
})();

# Clicks an element by selector on page load.
click-on-load.js application/javascript
(function() {
    console.log("click-on-load v4 loaded");
    var selector = '{{1}}';
    if (selector === '' || selector === '{{1}}') {
        console.log('click-on-load: no selector provided');
        return;
    }
    var urlRegex = '{{2}}';
    if (urlRegex === '' || urlRegex === '{{2}}') {
        urlRegex = '.?';
    } else if (/^\/.+\/$/.test(urlRegex)) {
        urlRegex = urlRegex.slice(1,-1);
    } else {
        urlRegex = urlRegex.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    urlRegex = new RegExp(urlRegex);
    var eventName = '{{3}}';
    if (eventName === '' || eventName === '{{3}}') {
        eventName = 'DOMContentLoaded';
    }
    if (urlRegex.test(window.location.href.split("#")[0])) {
        window.addEventListener(eventName, function() {
            var element = document.querySelector(selector);
            if (element === null) {
                console.log('click-on-load: no element for selector ' + selector);
            } else {
                element.click();
            }
        });
    }
})();

# Clicks an element by selector when it is added to the DOM.
click-on-add.js application/javascript
(function() {
    console.log("click-on-add v2 loaded");
    var parentSelector = '{{1}}';
    if (parentSelector === '' || parentSelector === '{{1}}') {
        parentSelector = 'body';
    }
    var targetSelector = '{{2}}';
    if (targetSelector === '' || targetSelector === '{{2}}') {
        console.log('click-on-add: no target selector provided');
        return;
    }
    var urlRegex = '{{3}}';
    if (urlRegex === '' || urlRegex === '{{3}}') {
        urlRegex = '.?';
    } else if (/^\/.+\/$/.test(urlRegex)) {
        urlRegex = urlRegex.slice(1,-1);
    } else {
        urlRegex = urlRegex.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    urlRegex = new RegExp(urlRegex);
    if (urlRegex.test(window.location.href.split("#")[0])) {
        window.addEventListener('DOMContentLoaded', function() {
            var parent = document.querySelector(parentSelector);
            if (parent === null) {
                console.log('click-on-add: no element for parent selector ' + parentSelector);
            } else {
                var observer = new MutationObserver(function() {
                    var target = document.querySelector(targetSelector);
                    if (target !== null) {
                        target.click();
                        observer.disconnect();
                    }
                });
                observer.observe(parent, {childList: true, subtree: true});
            }
        });
    }
})();

# Loads lazy-load images when they're scrolled into view.
lazy-load-images.js application/javascript
(function() {
    console.log("lazy-load-images v1 loaded");
    var srcAttribute = '{{1}}';
    if (srcAttribute === '' || srcAttribute === '{{1}}') {
        console.log('lazy-load-images: no src attribute provided');
        return;
    }
    window.addEventListener('DOMContentLoaded', function() {
        var imgs = document.querySelectorAll('img[' + srcAttribute + ']');
        if (imgs.length === 0) {
            console.log('lazy-load-images: no <img> tags with attribute ' + srcAttribute);
        } else {
            var observer = new IntersectionObserver(entries => entries.forEach(entry => {
                if (entry.intersectionRatio > 0.0) {
                    entry.target.src = entry.target.getAttribute(srcAttribute);
                    observer.unobserve(entry.target);
                }
            }), {rootMargin: '150px', threshold: 0.0});
            imgs.forEach(img => observer.observe(img));
        }
    });
})();
